/*
Application that performs the following:
1. reads Xsens and hokuyo sensors
2. calculates absolute 3D point cloud 
3. displays this in gdhe

Authors : Paul Cox, Bertrand Vandeportaele

Currently compiles only on x86 (ubuntu 10.04)  Feb 6 2011

TODO:
- make dist too close adjustable in GUI
- make FAC adjustable in GUI
- get png output working and cleaned up
- look into segmentation of points into surfaces
- work in log sensor vals to file and read back as virtual sensor
- implement virtual surface that is virtually sensed during fly over
*/

/*
Hokuyo times:
~/Documents/LAAS/laserhawk/hokuyomti/2011-02-17-19-16-49
scan000000 1297966609.500544
scan001710 1297966710.938730

MTI times:
./Documents/LAAS/laserhawk/hokuyomti/MTI.out
points around hokuyo start:
1297966609.494408131 QUAT  0.524142  0.143444  0.818253  0.187515 POS 377094.231 4824479.079    208.328  31T VEL   -1.7512    0.2324    0.8404
1297966609.504407883 QUAT  0.524124  0.143390  0.818256  0.187592 POS 377094.228 4824479.062    208.337  31T VEL   -1.7577    0.2331    0.8399

Start and end
1297965927.462918758
1297966725.302998781
*/


#include <QtGui>
#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "chokuyoplus.h"
#include "localefunc.h"

#include <stdio.h>

//#define FLOATHOKUYO double
//#define LOG_NAME	"/home/paul/Documents/LAAS/qtcreator_projs/hokuyomti/log/2011-06-14-22-54-34"
#define LOG_NAME	"/home/bvdp/laserhawk/hokuyomti/2011-02-17-19-16-49"
#define NB_SCAN_START   100
#define NB_SCAN_INCR 10
#define MTI_LOG_NAME	"/home/bvdp/laserhawk/hokuyomti/MTI.out"

#define HOKUYO_DEV	(char*)"/dev/ttyACM0"
void pline_from_pos(int mode, float x_pos, float y_pos, float z_pos);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), ui(new Ui::MainWindow)
{
    system(" gdhe &");
    system(" sleep 2");

    ::setLocale();
    MtiLog=new CMtiLog((char *)MTI_LOG_NAME);
    HokuyoSensor = new CHokuyoPlus(HOKUYO_DEV);
    HokuyoSensor->setReplayFileName(LOG_NAME);
    HokuyoSensor->seekReplay(NB_SCAN_START);

    InterfaceWithGDHE=new CInterfaceWithGDHE((char *)"localhost");

    ui->setupUi(this);
    gdhe_open = false;

    populate_GUI();
    this->resize(240,320);
    openGDHE();
    //    clear_function();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MainWindow::populate_GUI() {

    button_kill_gdhe = new QPushButton(tr("&Kill GDHE"));
    button_kill_gdhe->setDefault(true);
    button_kill_gdhe->setToolTip("kill gdhe");
    button_kill_gdhe->show();

    button_open = new QPushButton(tr("&Open device"));
    button_open->setDefault(true);
    button_open->setToolTip("Ouverture du port Hokuyo");
    button_open->show();

    button_close = new QPushButton(tr("&Close device"));
    button_close->setDefault(true);
    button_close->setToolTip("Fermeture du port Hokuyo");
    button_close->show();

    button_open_gdhe = new QPushButton(tr("&Open GDHE"));
    button_open_gdhe->setDefault(true);
    button_open_gdhe->setToolTip("Ouverture de GDHE");
    button_open_gdhe->show();

    button_scan_gdhe = new QPushButton(tr("&Scan in GDHE"));
    button_scan_gdhe->setDefault(true);
    button_scan_gdhe->setToolTip("Scan Hokuyo in GDHE");
    button_scan_gdhe->show();

    button_clear = new QPushButton(tr("&Clear GDHE"));
    button_clear->setDefault(true);
    button_clear->setToolTip("Clear");
    button_clear->show();

    button_animate = new QPushButton(tr("&Animate"));
    button_animate->setDefault(true);
    button_animate->setToolTip("Animate");
    button_animate->show();

    connect(button_animate, SIGNAL(clicked()),
            this, SLOT(animate()));


    connect(button_kill_gdhe, SIGNAL(clicked()),
            this, SLOT(kill_gdhe_function()));

    connect(button_clear, SIGNAL(clicked()),
            this, SLOT(clear_function()));

    /*     connect(button_open, SIGNAL(clicked()),
             this, SLOT(open_port()));

     connect(button_close, SIGNAL(clicked()),
             this, SLOT(close_port()));
*/
    connect(button_scan_gdhe, SIGNAL(clicked()),
            this, SLOT(scanGDHE()));

    connect(button_open_gdhe, SIGNAL(clicked()),
            this, SLOT(openGDHE()));

    label_image =  new QLabel("Image Window");

    label1 = new QLabel("Hokuyo port is closed");


    layout_G = new QGridLayout;// slots:
    layout_G->addWidget(button_open, 0, 0);
    layout_G->addWidget(button_close, 1, 0);
    layout_G->addWidget(button_open_gdhe, 2,0);
    layout_G->addWidget(button_scan_gdhe, 3,0);
    layout_G->addWidget(button_clear, 4,0);
    layout_G->addWidget(button_kill_gdhe, 5,0);
    layout_G->addWidget(button_animate, 6,0);


    animFlag=0;
    Timer=new QTimer(this);
    Timer->setInterval(100);
    connect(Timer, SIGNAL(timeout()), this, SLOT(on_timer_Event()));
    Timer->start();

    centralWidget()->setLayout(layout_G);
    setWindowTitle("log2gdhe App");
    animFlag=1; //for debugging purpose, start animating to debug directly without clicking on buttons
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MainWindow::on_timer_Event()
{
    if (animFlag!=0)
        this->scanGDHE();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
MainWindow::~MainWindow()
{
    //system("pkill gdhe");
    delete HokuyoSensor;
    delete MtiLog;
    delete InterfaceWithGDHE;
    delete ui;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MainWindow::kill_gdhe_function()
{
    system("pkill gdhe");
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MainWindow::animate()
{
    animFlag=(animFlag+1)%2;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MainWindow::clear_function()
{
    if(gdhe_open == true)
    {
        InterfaceWithGDHE->Clear();
        //        nb_scan=NB_SCAN_START;
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MainWindow::openGDHE()
{
    if( gdhe_open == false )
    {
        button_open_gdhe->setText("close GDHE");
        gdhe_open=true;
    }
    else
    {
        gdhe_open = false;
        button_open_gdhe->setText("open GDHE");
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MainWindow::scanGDHE()
{
    if( gdhe_open == true )
    {
        HokuyoSensor->getRange();// Get range data
        MtiLog->Get(HokuyoSensor->hokuyotime); //get MTI data
        //ATTENTION: order of the three angles in following line was done arbitrarily
        InterfaceWithGDHE->DisplayCoordinateFrame( atan2(-MtiLog->R31,MtiLog->R11),
                                                   asin(MtiLog->R21),
                                                   atan2(-MtiLog->R23,MtiLog->R22),
                                                   MtiLog->lat,
                                                   MtiLog->lon,
                                                   MtiLog->alt);
        InterfaceWithGDHE->DisplayTrajectory(MtiLog->lat,
                                             MtiLog->lon,
                                             MtiLog->alt);
        InterfaceWithGDHE->SetColorScan(0,200,(4*HokuyoSensor->nb_scan));
        InterfaceWithGDHE->DisplayScan(&HokuyoSensor->data, MtiLog);//display in GDHE
        HokuyoSensor->seekReplay( HokuyoSensor->nb_scan+NB_SCAN_INCR-1);
    }
    else
    {
        label1->setText("GDHE program is closed\n");
        printf("GDHE program is closed\n");
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
